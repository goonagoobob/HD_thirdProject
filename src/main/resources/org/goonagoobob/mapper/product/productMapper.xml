<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.goonagoobob.mapper.product.productMapper" >	

	<resultMap type="org.goonagoobob.domain.product.productCommonVO" id="pc1Map">
		<result property="pid" column="pid"></result>
		<result property="pname" column="pname"></result>
		<result property="pnote" column="pnote"></result>
		<result property="bname" column="bname"></result>
		<collection property="pcVO" resultMap="pc2Map"></collection>
	</resultMap>
	
	<resultMap type="org.goonagoobob.domain.product.productColorVO" id="pc2Map">
		<result property="pcid" column="pcid"/>
		<result property="pcimg1" column="pcimg1"></result>
		<result property="pcimg2" column="pcimg2"></result>
		<result property="pcimg3" column="pcimg3"></result>
		<result property="pcchipimg" column="pcchipimg"></result>
		<result property="pccolorcode" column="pccolorcode"></result>
		<result property="pcprice" column="pcprice"></result>
		<result property="preleasedate" column="preleasedate"></result>
		<collection property="psVO" resultMap="psMap"></collection>
	</resultMap>
	
		<resultMap type="org.goonagoobob.domain.product.productStockVO" id="psMap">
		<result property="psid" column="psid"></result>
		<result property="psstock" column="psstock"></result>
		<result property="psize" column="psize"></result>
	</resultMap>
	
	<resultMap type="org.goonagoobob.domain.product.brandVO" id="brandMap">
		<result property="brand" column="bname"></result>
		<collection property="depth1VO" resultMap="depth1Map"></collection>
	</resultMap>
	<resultMap type="org.goonagoobob.domain.product.depth1VO" id="depth1Map">
		<result property="depth1" column="depth1name"></result>
		<collection property="depth2VO" resultMap="depth2Map"></collection>
	</resultMap>
	<resultMap type="org.goonagoobob.domain.product.depth2VO" id="depth2Map">
		<result property="depth2" column="depth2name"></result>
		<collection property="depth3VO" resultMap="depth3Map"></collection>
	</resultMap>
	<resultMap type="org.goonagoobob.domain.product.depth3VO" id="depth3Map">
		<result property="depth3" column="depth3name"></result>
	</resultMap>
	
	<resultMap type="org.goonagoobob.domain.product.reviewVO" id="reviewMap">
		<result property="MID" column="MID"></result>
		<result property="RV_TEXT" column="RV_TEXT"></result>
		<result property="RV_DATE" column="RV_DATE"></result>
		<result property="PSID" column="PSID"></result>
		<result property="AGE" column="AGE"></result>
		<result property="HEIGHT" column="HEIGHT"></result>
		<result property="BODYTYPE" column="BODYTYPE"></result>
		<result property="ENJOYSIZE" column="ENJOYSIZE"></result>
		<result property="RATING" column="RATING"></result>
		<result property="REALWEARSIZE1" column="REALWEARSIZE1"></result>
		<result property="REALWEARSIZE2" column="REALWEARSIZE2"></result>
		<result property="REALWEARSIZE3" column="REALWEARSIZE3"></result>
		<result property="REALPRODUCTCOLOR" column="REALPRODUCTCOLOR"></result>
	</resultMap>
	
	<resultMap type="org.goonagoobob.domain.product.FileDto" id="FileDTOMap">
		<result property="FILE_UUID" column="FILE_UUID"></result>
		<result property="FILENAME" column="FILENAME"></result>
		<result property="UPLOADPATH" column="UPLOADPATH"></result>
		<result property="FILETYPE" column="FILETYPE"></result>
	</resultMap>
	
	
	<select id="getPDetail" resultMap="pc1Map">
		select * from allproduct where #{pid} = pid
	</select>
	
	<select id="getBrd" resultMap="brandMap">
		select * from allcategory
	</select>
	
	<select id="getCtgr" resultMap="depth1Map">
		select depth1name, depth2name, depth3name from allcategory
	</select>
	
	<select id="getPColor" resultMap="pc2Map">
		select pcid, pcimg1, pcimg2, pcimg3, pcchipimg, pccolorcode, pcprice, preleasedate, 
		psid, psstock, psize from allproduct where #{pcid} = pcid
	</select>

	<select id="getList" resultMap="pc1Map">
	                                    select pid, pname, pnote, bname, pcid, pcimg1, pcimg2, pcimg3, pcchipimg, pccolorcode, pcprice, preleasedate, 
psid, psstock, psize from allproduct where pid in (select pid from (
select rownum as row_num, pid from (select distinct p.pid, p.pcprice from allproduct 
p,product_category pc, category c
where p.pid = pc.pid and pc.cateno = c.cateno and 

	<choose>
			<when test="brand != null">
				<choose>
					<when test="depth1 != null">
						<choose>
							<when test="depth2 != null">
								<choose>
									<when test="depth3 != null">
									<![CDATA[
										p.bname = #{brand} and depth1name = #{depth1} and depth2name = #{depth2} and depth3name = #{depth3}
                                        ${orderBy}
										)
                                        where
										rownum < #{productNum}) where row_num >= #{Piter})${orderBy}
										]]>
									</when>
									<otherwise>
									<![CDATA[
										p.bname = #{brand} and depth1name = #{depth1} and depth2name = #{depth2}
                                        ${orderBy}
										)
                                        where
										rownum < #{productNum}) where row_num >= #{Piter})${orderBy}
										]]>
									</otherwise>
								</choose>
							</when>
							<otherwise>
							<![CDATA[
										p.bname = #{brand} and depth1name = #{depth1}
                                        ${orderBy}
										)
                                        where
										rownum < #{productNum}) where row_num >= #{Piter})${orderBy}
										]]>
							</otherwise>
						</choose>
					</when>
					<otherwise>
					<![CDATA[
										p.bname = #{brand}
                                        ${orderBy}
										)
                                        where
										rownum < #{productNum}) where row_num >= #{Piter})${orderBy}
										]]>
					</otherwise>
				</choose>
				
			</when>
			<otherwise>
						<choose>
							<when test="depth2 != null">
								<choose>
									<when test="depth3 != null">
									<![CDATA[
										depth1name = #{depth1} and depth2name = #{depth2} and depth3name = #{depth3}
                                        ${orderBy}
										)
                                        where
										rownum < #{productNum}) where row_num >= #{Piter})${orderBy}
										]]>
									</when>
									<otherwise>
									<![CDATA[
										depth1name = #{depth1} and depth2name = #{depth2}
                                        ${orderBy}
										)
                                        where
										rownum < #{productNum}) where row_num >= #{Piter})${orderBy}
										]]>
									</otherwise>
								</choose>
							</when>
							<otherwise>
							<![CDATA[
										depth1name = #{depth1}
                                        ${orderBy}
										)
                                        where
										rownum < #{productNum}) where row_num >= #{Piter})${orderBy}
										]]>
							</otherwise>
						</choose>

			</otherwise>
		</choose>
	</select>
	<select id="getCtgrList" resultType="String">
		<choose>
			<when test="brand != null">
				<choose>
					<when test="depth1 != null">
						<choose>
							<when test="depth2 != null">
								select distinct depth3name from allcategory where bname = #{brand} and depth1name = #{depth1} and depth2name = #{depth2}
							</when>
							<otherwise>
								select distinct depth2name from allcategory where bname = #{brand} and depth1name = #{depth1}
							</otherwise>
						</choose>
					</when>
					<otherwise>
						select distinct depth1name from allcategory where bname = #{brand}
					</otherwise>
				</choose>
			</when>
			<otherwise>
						<choose>
							<when test="depth2 != null">
								select distinct depth3name from allcategory where depth1name = #{depth1} and depth2name = #{depth2}
							</when>
							<otherwise>
								select distinct depth2name from allcategory where depth1name = #{depth1}
							</otherwise>
						</choose>
			</otherwise>
		</choose>
	</select>
		<select id="getNewList" resultMap="pc1Map">
		<![CDATA[
	select * from allproduct where pid in 
	(select * from 
	(select pid from 
	(select rownum ,pid from allproduct order by preleasedate desc) 
	group by pid) 
	where rownum < 10)
	]]>
	</select>
	<select id="getBestList" resultMap="pc1Map">
	<![CDATA[
		select * from allproduct where pid in (select pid from 
                         (select pid ,count(pid) from order_item o , allproduct p 
                         where o.psid = p.psid 
                         group by pid 
                         order by count(pid) desc) 
                         where rownum < 10)
                         ]]>
	</select>
		<select id="newCount" resultType="int">
	<![CDATA[
	
                                       select count(*) from product_color where preleasedate between (SELECT SYSDATE - 3 FROM dual) and sysdate
                                       
                         ]]>
	</select>	
	<select id="getCount" resultType="int">
		<choose>
			<when test="brand != null">
				<choose>
					<when test="depth1 != null">
						<choose>
							<when test="depth2 != null">
								<choose>
									<when test="depth3 != null">
																	  select count(*) from (select distinct pid from (select p.pid, pname, pnote, b.bname, pcid, pcimg1, pcimg2, pcimg3, pcchipimg, pccolorcode, pcprice, preleasedate, 
										psid, psstock, psize, depth1name, depth2name, depth3name from brand b, allproduct p, product_category pc, category c
										where b.bname = p.bname and p.pid = pc.pid and pc.cateno = c.cateno) where bname = #{brand} and depth1name = #{depth1} and depth2name = #{depth2} and depth3name = #{depth3})
									</when>
									<otherwise>
								  select count(*) from (select distinct pid from (select p.pid, pname, pnote, b.bname, pcid, pcimg1, pcimg2, pcimg3, pcchipimg, pccolorcode, pcprice, preleasedate, 
										psid, psstock, psize, depth1name, depth2name, depth3name from brand b, allproduct p, product_category pc, category c
										where b.bname = p.bname and p.pid = pc.pid and pc.cateno = c.cateno) where bname = #{brand} and depth1name = #{depth1} and depth2name = #{depth2} )
									
									</otherwise>
								</choose>
							</when>
							<otherwise>
								select count(*) from (select distinct pid from (select p.pid, pname, pnote, b.bname, pcid, pcimg1, pcimg2, pcimg3, pcchipimg, pccolorcode, pcprice, preleasedate, 
										psid, psstock, psize, depth1name, depth2name, depth3name from brand b, allproduct p, product_category pc, category c
										where b.bname = p.bname and p.pid = pc.pid and pc.cateno = c.cateno) where bname = #{brand} and depth1name = #{depth1} )
							</otherwise>
						</choose>
					</when>
					<otherwise>
														  select count(*) from (select distinct pid from (select p.pid, pname, pnote, b.bname, pcid, pcimg1, pcimg2, pcimg3, pcchipimg, pccolorcode, pcprice, preleasedate, 
										psid, psstock, psize, depth1name, depth2name, depth3name from brand b, allproduct p, product_category pc, category c
										where b.bname = p.bname and p.pid = pc.pid and pc.cateno = c.cateno) where bname = #{brand} )
					</otherwise>
				</choose>
			</when>
			<otherwise>
						<choose>
							<when test="depth2 != null">
								select distinct depth3name from allcategory where depth1name = #{depth1} and depth2name = #{depth2}
							</when>
							<otherwise>
								select distinct depth2name from allcategory where depth1name = #{depth1}
							</otherwise>
						</choose>
			</otherwise>
		</choose>
	</select>
	<select id="getReview" resultMap="reviewMap">
		select  MID, RV_TEXT, RV_DATE, PSID, AGE, HEIGHT, BODYTYPE, ENJOYSIZE, RATING, REALWEARSIZE1, REALWEARSIZE2, REALWEARSIZE3, REALPRODUCTCOLOR from review r left outer join attachs a  on (r.RNO = a.rno) where psid in (select psid from allproduct where pid = #{pid})
	</select>
	
	<select id="getMyReview" resultType="String">
	<![CDATA[
		select distinct psid from orders, order_item 
		where orders.oid = order_item.oid and mid = #{mid} and 
		psid in (select psid from allproduct where pid = #{pid}) and rownum < 2
		]]>
	</select>
	<insert id="insertReview" parameterType="reviewVO">
		insert into review values(rno_seq.nextval, #{MID},#{RV_TEXT},#{RV_DATE},#{PSID},#{AGE},#{HEIGHT},#{BODYTYPE},#{ENJOYSIZE},#{RATING},#{REALWEARSIZE1},#{REALWEARSIZE2},#{REALWEARSIZE3},#{REALPRODUCTCOLOR} )
	</insert>
	<insert id="insertFileDto" parameterType="FileDto">
		insert into Attachs values(#{FILE_UUID},#{RNO},#{UPLOADPATH},#{FILENAME},#{FILETYPE})
	</insert>
</mapper>

<!-- /*********************************
 * @function : 상품 관련 Mapper
 * @author : 조일우
 * @Date : Feb 6. 2023.
 * 상품 상세 정보 Mapper Feb 6. 2022
 * 상품 컬러 변경 Mapper Feb 7. 2022
 * 상품 카테고리 리스트 Mapper Feb 8. 2022
 * 상품 리스트 Mapper Feb 10. 2022
 * 메인 상품 리스트 Mapper 추가 Feb 11. 2023
 * 상품 리스트 상품 갯수Mapper 추가 Feb 12. 2023
 * 리뷰 삽입 Mapper 추가 Feb 13. 2023
 *********************************/ -->