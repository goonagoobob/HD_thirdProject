<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.goonagoobob.mapper.product.productMapper" >	

	<resultMap type="org.goonagoobob.domain.product.productCommonVO" id="pc1Map">
		<result property="pid" column="pid"></result>
		<result property="pname" column="pname"></result>
		<result property="pnote" column="pnote"></result>
		<result property="bname" column="bname"></result>
		<collection property="pcVO" resultMap="pc2Map"></collection>
	</resultMap>
	
	<resultMap type="org.goonagoobob.domain.product.productColorVO" id="pc2Map">
		<result property="pcid" column="pcid"/>
		<result property="pcimg1" column="pcimg1"></result>
		<result property="pcimg2" column="pcimg2"></result>
		<result property="pcimg3" column="pcimg3"></result>
		<result property="pcchipimg" column="pcchipimg"></result>
		<result property="pccolorcode" column="pccolorcode"></result>
		<result property="pcprice" column="pcprice"></result>
		<result property="preleasedate" column="preleasedate"></result>
		<collection property="psVO" resultMap="psMap"></collection>
	</resultMap>
	
		<resultMap type="org.goonagoobob.domain.product.productStockVO" id="psMap">
		<result property="psid" column="psid"></result>
		<result property="psstock" column="psstock"></result>
		<result property="psize" column="psize"></result>
	</resultMap>
	
	<resultMap type="org.goonagoobob.domain.product.brandVO" id="brandMap">
		<result property="brand" column="bname"></result>
		<collection property="depth1VO" resultMap="depth1Map"></collection>
	</resultMap>
	<resultMap type="org.goonagoobob.domain.product.depth1VO" id="depth1Map">
		<result property="depth1" column="depth1name"></result>
		<collection property="depth2VO" resultMap="depth2Map"></collection>
	</resultMap>
	<resultMap type="org.goonagoobob.domain.product.depth2VO" id="depth2Map">
		<result property="depth2" column="depth2name"></result>
		<collection property="depth3VO" resultMap="depth3Map"></collection>
	</resultMap>
	<resultMap type="org.goonagoobob.domain.product.depth3VO" id="depth3Map">
		<result property="depth3" column="depth3name"></result>
	</resultMap>
	
	<select id="getPDetail" resultMap="pc1Map">
		select * from allproduct where #{pid} = pid
	</select>
	
	<select id="getBrd" resultMap="brandMap">
		select * from allcategory
	</select>
	
	<select id="getCtgr" resultMap="depth1Map">
		select depth1name, depth2name, depth3name from allcategory
	</select>
	
	<select id="getPColor" resultMap="pc2Map">
		select pcid, pcimg1, pcimg2, pcimg3, pcchipimg, pccolorcode, pcprice, preleasedate, 
		psid, psstock, psize from allproduct where #{pcid} = pcid
	</select>

	<select id="getList" resultMap="pc1Map">
	

	<choose>
			<when test="brand != null">
				<choose>
					<when test="depth1 != null">
						<choose>
							<when test="depth2 != null">
								<choose>
									<when test="depth3 != null">
									<![CDATA[
                                        select pid, pname, pnote, bname, pcid, pcimg1, pcimg2, pcimg3, pcchipimg, pccolorcode, pcprice, preleasedate, 
										psid, psstock, psize from allproduct where pid in (select pid from(select distinct pid from (select rownum, p.pid from allproduct 
                                        p,product_category pc, category c
										where p.pid = pc.pid and pc.cateno = c.cateno and
										p.bname = #{brand} and depth1name = #{depth1} and depth2name = #{depth2} and depth3name = #{depth3}
                                        ${orderBy}
										))
                                        where
										rownum >= #{Piter} and rownum < #{productNum})
										]]>
									</when>
									<otherwise>
									<![CDATA[
                                        select pid, pname, pnote, bname, pcid, pcimg1, pcimg2, pcimg3, pcchipimg, pccolorcode, pcprice, preleasedate, 
										psid, psstock, psize from allproduct where pid in (select pid from(select distinct pid from (select rownum, p.pid from allproduct 
                                        p,product_category pc, category c
										where p.pid = pc.pid and pc.cateno = c.cateno and
										p.bname = #{brand} and depth1name = #{depth1} and depth2name = #{depth2}
                                        ${orderBy}
										))
                                        where
										rownum >= #{Piter} and rownum < #{productNum})
										]]>
									</otherwise>
								</choose>
							</when>
							<otherwise>
							<![CDATA[
										select pid, pname, pnote, bname, pcid, pcimg1, pcimg2, pcimg3, pcchipimg, pccolorcode, pcprice, preleasedate, 
										psid, psstock, psize from
										(select p.pid, pname, pnote, b.bname, pcid, pcimg1, pcimg2, pcimg3, pcchipimg, pccolorcode, pcprice, preleasedate, 
										psid, psstock, psize, depth1name, depth2name, depth3name from brand b, allproduct p, product_category pc, category c
										where b.bname = p.bname and p.pid = pc.pid and pc.cateno = c.cateno and
										p.bname = #{brand} and depth1name = #{depth1}
                                        ${orderBy}
										)
                                        where
										rownum >= #{Piter} and rownum < #{productNum}
										]]>
							</otherwise>
						</choose>
					</when>
					<otherwise>
					<![CDATA[
                                        select pid, pname, pnote, bname, pcid, pcimg1, pcimg2, pcimg3, pcchipimg, pccolorcode, pcprice, preleasedate, 
										psid, psstock, psize from allproduct where pid in (select pid from(select distinct pid from (select rownum, p.pid from allproduct 
                                        p,product_category pc, category c
										where p.pid = pc.pid and pc.cateno = c.cateno and
										p.bname = #{brand}
                                        ${orderBy}
										))
                                        where
										rownum >= #{Piter} and rownum < #{productNum})
										]]>
					</otherwise>
				</choose>
				
			</when>
			<otherwise>
						<choose>
							<when test="depth2 != null">
								<choose>
									<when test="depth3 != null">
									<![CDATA[
										                                        select pid, pname, pnote, bname, pcid, pcimg1, pcimg2, pcimg3, pcchipimg, pccolorcode, pcprice, preleasedate, 
										psid, psstock, psize from allproduct where pid in (select pid from(select distinct pid from (select rownum, p.pid from allproduct 
                                        p,product_category pc, category c
										where p.pid = pc.pid and pc.cateno = c.cateno and
										depth1name = #{depth1} and depth2name = #{depth2} and depth3name = #{depth3}
                                        ${orderBy}
										))
                                        where
										rownum >= #{Piter} and rownum < #{productNum})
										]]>
									</when>
									<otherwise>
									<![CDATA[
                                        select pid, pname, pnote, bname, pcid, pcimg1, pcimg2, pcimg3, pcchipimg, pccolorcode, pcprice, preleasedate, 
										psid, psstock, psize from allproduct where pid in (select pid from(select distinct pid from (select rownum, p.pid from allproduct 
                                        p,product_category pc, category c
										where p.pid = pc.pid and pc.cateno = c.cateno and
										depth1name = #{depth1} and depth2name = #{depth2}
                                        ${orderBy}
										))
                                        where
										rownum >= #{Piter} and rownum < #{productNum})
										]]>
									</otherwise>
								</choose>
							</when>
							<otherwise>
							<![CDATA[
                                        select pid, pname, pnote, bname, pcid, pcimg1, pcimg2, pcimg3, pcchipimg, pccolorcode, pcprice, preleasedate, 
										psid, psstock, psize from allproduct where pid in (select pid from(select distinct pid from (select rownum, p.pid from allproduct 
                                        p,product_category pc, category c
										where p.pid = pc.pid and pc.cateno = c.cateno and
										depth1name = #{depth1}
                                        ${orderBy}
										))
                                        where
										rownum >= #{Piter} and rownum < #{productNum})
										]]>
							</otherwise>
						</choose>

			</otherwise>
		</choose>
	</select>
	<select id="getCtgrList" resultType="String">
		<choose>
			<when test="brand != null">
				<choose>
					<when test="depth1 != null">
						<choose>
							<when test="depth2 != null">
								select distinct depth3name from allcategory where bname = #{brand} and depth1name = #{depth1} and depth2name = #{depth2}
							</when>
							<otherwise>
								select distinct depth2name from allcategory where bname = #{brand} and depth1name = #{depth1}
							</otherwise>
						</choose>
					</when>
					<otherwise>
						select distinct bname from allcategory where bname = #{brand}
					</otherwise>
				</choose>
			</when>
			<otherwise>
						<choose>
							<when test="depth2 != null">
								select distinct depth3name from allcategory where depth1name = #{depth1} and depth2name = #{depth2}
							</when>
							<otherwise>
								select distinct depth2name from allcategory where depth1name = #{depth1}
							</otherwise>
						</choose>
			</otherwise>
		</choose>
	</select>
</mapper>

<!-- /*********************************
 * @function : 상품 관련 Mapper
 * @author : 조일우
 * @Date : Feb 6. 2023.
 * 상품 상세 정보 Mapper Feb 6. 2022
 * 상품 컬러 변경 Mapper Feb 7. 2022
 * 상품 카테고리 리스트 Mapper Feb 8. 2022
 * 상품 리스트 Mapper Feb 10. 2022
 *********************************/ -->